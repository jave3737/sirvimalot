ยง =============================================================
ยง  Custom Template for C
ยง =============================================================
SetStyle( 'C' )

== USE STYLES : C ==

== Idioms.enum == map:ie, shortcut:e  ==
typedef enum  /* ----------  start of enum |ENUM_NAME|  ---------- */ 
{                      
<SPLIT>
} |?ENUM_NAME|;
== ENDTEMPLATE ==

== Idioms.struct == map:is, shortcut:s  ==
typedef struct /* ----------  start of struct |STRUCT_NAME|  ---------- */ 
{                    
<SPLIT>
} |?STRUCT_NAME|;
== ENDTEMPLATE ==

== Idioms.function == map:if, shortcut:f  ==
|?RETURN_TYPE| |?FUNCTION_NAME| ( |?ARGUMENTS| )
{
<SPLIT>
    return <+return_value+>;
}/* -----  end of function |FUNCTION_NAME|  ----- */
== ENDTEMPLATE ==

== Statements.if == map:sif, shortcut:i  ==
if ( |?STATEMENT| ) 
{
<SPLIT><-IF_PART->
}/* ----------  end of if |STATEMENT|  ---------- */
== ENDTEMPLATE ==

== Statements.if + else == map:sie, shortcut:i  ==
if ( |?STATEMENT| ) 
{
<SPLIT><-IF_PART->
}
else 
{
<-ELSE_PART->
}/* ----------  end of if-else |STATEMENT|  ---------- */
== ENDTEMPLATE ==

== Statements.while == map:sw, shortcut:w  ==
while ( |?STATEMENT| ) 
{
<SPLIT><-WHILE_PART->
}/* ----------  end of while |STATEMENT|  ---------- */
== ENDTEMPLATE ==

== Statements.for == map:sfo, shortcut:f  ==
for ( |?STATEMENT| ) 
{
<SPLIT><-FOR_PART->
}/* ----------  end of for |STATEMENT|  ---------- */
== ENDTEMPLATE ==

== Preprocessor.ifdef-else-endif == map:pid, shortcut:f ==
#ifdef  |?CONDITION:u|
<SPLIT><-IF_PART->
#else      
<-ELSE_PART->
#endif/* -----  end of ifdef |CONDITION|  ----- */
== ENDTEMPLATE ==

== Preprocessor.if-endif == map:pif, shortcut:i ==
#if  |?CONDITION:u|
<CURSOR><SPLIT>
#endif/* -----  end of ifdef |CONDITION|  ----- */
== ENDTEMPLATE ==
== ENDSTYLES ==
